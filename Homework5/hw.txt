1.
a)
                              50
              20                              60
      10              40              --              70
  --      --      30      45      --      --      65      80
--  --  --  --  25  35  --  --  --  --  --  --  --  --  75  --

b)
                              50
              25                              60
      10              40              --              70
  --      --      35      45      --      --      65      80
--  --  --  --  --  --  --  --  --  --  --  --  --  --  75  --
c)
in-order:  10,20,25,30,35,40,45,50,60,65,70,75,80
pre-order: 50,20,10,40,30,25,35,45,60,70,65,80,75
post-order:10,25,35,30,45,40,20,65,75,80,70,60,50

2.
a)
              _3
      _2              _4
  _1      --      --      _8
--  --  --  --  --  --  _6  --
b)
in-order:   1,2,3,4,6,8
pre-order:  3,2,1,4,8,6
post-order: 1,2,6,8,4,3
level-order:3,2,4,1,8,6
3.
a)
struct Node
{
	int data;
	Node* left;
	Node* right;
	Node* parent;
};
b)
make a traversal pointer
make a parent pointer
if the tree is empty
	set the root pointer to the node to insert
else
	set the traversal pointer to the root node
	while the traversal pointer is not null and the traversal node's data is not the same as the node to insert's
		set parent pointer to traversal pointer
		if the data in the traversal node is less than the data in the node to insert
			make the traversal pointer go right
		else
			make the traversal pointer go left
	set the node to insert's parent pointer to the parent node
	if the traversal node's data is the same as the node to insert
		do nothing, the node is already in the tree
	else if the parent node's data is less than the data in the node to insert
		set the parent node's right pointer to the node to insert
	else
		set the parent node's left pointer to the node to insert